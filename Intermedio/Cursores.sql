SET SERVEROUTPUT ON;

-- ATRIBUTOS (FUNCIONES QUE REGRESAN VALORES)
-- DE LOS CURSORES IMPLICITOS

/*
    SQL%ISOPEN --SIEMPRE SALE FALSE
    SQL%FOUND
    SQL%NOTFOUND
    SQL%ROWCOUNT
*/

DECLARE 
    CURSOR c1 IS SELECT * FROM REGIONS;
    v_r REGIONS%ROWTYPE;
BEGIN
    OPEN c1;
    LOOP
        FETCH c1 INTO v_r;
        EXIT WHEN C1%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(v_r.REGION_NAME);
    END LOOP;
    CLOSE c1;
END;

-- MANERA MÁS ÓPTIMA (FOR) de 7 a 3 LINEAS

DECLARE 
    CURSOR c1 IS SELECT * FROM REGIONS;
    v_r REGIONS%ROWTYPE;
BEGIN
    FOR i IN c1 LOOP
        DBMS_OUTPUT.PUT_LINE(i.REGION_NAME);
    END LOOP;
END;

-- CURSOR AÚN MÁS CORTO

BEGIN 
    FOR i IN (SELECT * FROM REGIONS) LOOP
        DBMS_OUTPUT.PUT_LINE(i.REGION_NAME);
    END LOOP;
END;

-- CURSORES CON PARÁMETROS

DECLARE
    CURSOR MC (mc_id NUMBER) IS 
    SELECT * FROM REGIONS WHERE REGION_ID >= mc_id;
BEGIN
    FOR i IN MC(3) LOOP
        -- NOTESE QUE LOS DATOS SON ACCESIBLES A PARTIR DE LA VARIABLE
        DBMS_OUTPUT.PUT_LINE(i.REGION_NAME);
    END LOOP;
END;


DECLARE 
    CURSOR MC(i NUMBER) IS
    SELECT * FROM EMPLOYEES WHERE EMPLOYEE_ID>=i ORDER BY EMPLOYEE_ID;
    v_email VARCHAR2(100);
    v_emp EMPLOYEES%ROWTYPE;
BEGIN
    --A LA ANTIGUA PERO CON MÁS POSIBILIDADES
    OPEN MC(200);
    LOOP
        FETCH MC INTO v_emp;
        EXIT WHEN MC%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(v_emp.EMPLOYEE_ID);
    END LOOP;
    DBMS_OUTPUT.PUT_LINE(MC%ROWCOUNT);
    CLOSE MC;
END;

-- CURSOR QUE ACTUALIZA

DECLARE
    v_emp EMPLOYEES%ROWTYPE;
    CURSOR MC IS SELECT * FROM EMPLOYEES FOR UPDATE;
BEGIN
    OPEN MC;
    LOOP
        FETCH MC INTO v_emp;
        EXIT WHEN MC%NOTFOUND;
        UPDATE EMPLOYEES
        SET EMPLOYEES.SALARY=EMPLOYEES.SALARY*1.1
        WHERE CURRENT OF MC;
    END LOOP;
    CLOSE MC;
    COMMIT;
END;
