/*
1- Crear un TRIGGER BEFORE DELETE sobre la tabla EMPLOYEES que impida borrar un 
registro si su JOB_ID es algo relacionado con CLERK
*/

CREATE OR REPLACE TRIGGER T_CLERK
BEFORE DELETE ON EMPLOYEES
FOR EACH ROW
BEGIN
    IF :OLD.JOB_ID LIKE('%CLERK') THEN
        RAISE_APPLICATION_ERROR(-20006,'PROTEGIENDO A LOS CLERK');
    END IF;
END;

DELETE FROM EMPLOYEES WHERE JOB_ID LIKE('%CLERK');

/*
2- Crear una tabla denominada AUDITORIA con las siguientes columnas:

CREATE TABLE AUDITORIA (
USUARIO VARCHAR(50),
FECHA DATE,
SALARIO_ANTIGUO NUMBER,
SALARIO_NUEVO NUMBER);
*/

CREATE TABLE AUDITORIA
(
USUARIO VARCHAR(50),
FECHA DATE,
SALARIO_ANTIGUO NUMBER,
SALARIO_NUEVO NUMBER);

/*
3-Crear un TRIGGER BEFORE INSERT de tipo STATEMENT, de forma que cada vez que 
se haga un INSERT en la tabla REGIONS guarde una fila en la tabla AUDITORIA con
el usuario y la fecha en la que se ha hecho el INSERT
*/
--EL STATEMENT ESTÁ IMPLICITO SI NO SE PONE LAS CLAUSULAS EACH ROW
CREATE OR REPLACE TRIGGER T_ADD_AUD
BEFORE INSERT ON REGIONS
BEGIN
    INSERT INTO AUDITORIA VALUES (USER,SYSDATE,NULL,NULL);
END;

INSERT INTO REGIONS VALUES (100,'RUSIA');

/*
4- Realizar otro trigger BEFORE UPDATE de la columna SALARY de tipo EACH ROW. 
Si la modificación supone rebajar el salario el TRIGGER debe disparar un 
RAISE_APPLICATION_FAILURE “no se puede bajar un salario”. 
Si el salario es mayor debemos dejar el salario antiguo y el salario nuevo en 
la tabla AUDITORIA.
*/

CREATE OR REPLACE TRIGGER T_SALARY
BEFORE UPDATE OF SALARY ON EMPLOYEES
FOR EACH ROW
BEGIN
    IF :OLD.SALARY>:NEW.SALARY THEN
        RAISE_APPLICATION_ERROR(-20006,'NO SE PUEDE BAJAR UN SALARIO');
    ELSE
        INSERT INTO AUDITORIA VALUES(USER,SYSDATE,:OLD.SALARY,:NEW.SALARY);
    END IF;
END;

UPDATE EMPLOYEES SET SALARY=SALARY-1 WHERE EMPLOYEE_ID <> 100;
UPDATE EMPLOYEES SET SALARY=SALARY+1 WHERE EMPLOYEE_ID <> 100;


/*
5-Crear un TRIGGER BEFORE INSERT en la tabla DEPARTMENTS que al insertar un 
departamento compruebe que el código no esté repetido y luego que si el 
LOCATION_ID es NULL le ponga 1700 y si el MANAGER_ID es NULL le ponga 200
*/

CREATE OR REPLACE TRIGGER T_DEPT_CONFIG
BEFORE INSERT ON DEPARTMENTS
FOR EACH ROW
DECLARE
    v_cont NUMBER := 0;
BEGIN
    SELECT COUNT(*)
    INTO v_cont
    FROM DEPARTMENTS
    WHERE DEPARTMENT_ID = :NEW.DEPARTMENT_ID;
    
    IF v_cont <> 0 THEN
        RAISE_APPLICATION_ERROR(-20007,'DEPARTAMENTO EXISTENTE');
    ELSE
        IF :NEW.LOCATION_ID IS NULL THEN
            :NEW.LOCATION_ID:=1700;
        END IF;
        IF :NEW.MANAGER_ID IS NULL THEN
            :NEW.MANAGER_ID:=200;
        END IF;
    END IF;
END;

INSERT INTO DEPARTMENTS VALUES (300,'7W7',NULL,NULL);

